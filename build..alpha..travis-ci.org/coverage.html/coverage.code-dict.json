{"/home/travis/build/npmtest/node-npmtest-browser-resolve/test.js":"/* istanbul instrument in package npmtest_browser_resolve */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browser-resolve/lib.npmtest_browser_resolve.js":"/* istanbul instrument in package npmtest_browser_resolve */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_browser_resolve = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_browser_resolve = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-browser-resolve/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-browser-resolve && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_browser_resolve */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_browser_resolve\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_browser_resolve.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_browser_resolve.rollup.js'] =\n            local.assetsDict['/assets.npmtest_browser_resolve.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_browser_resolve.__dirname + '/lib.npmtest_browser_resolve.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browser-resolve/node_modules/browser-resolve/index.js":"// builtin\nvar fs = require('fs');\nvar path = require('path');\n\n// vendor\nvar resv = require('resolve');\n\n// given a path, create an array of node_module paths for it\n// borrowed from substack/resolve\nfunction nodeModulesPaths (start, cb) {\n    var splitRe = process.platform === 'win32' ? /[\\/\\\\]/ : /\\/+/;\n    var parts = start.split(splitRe);\n\n    var dirs = [];\n    for (var i = parts.length - 1; i >= 0; i--) {\n        if (parts[i] === 'node_modules') continue;\n        var dir = path.join.apply(\n            path, parts.slice(0, i + 1).concat(['node_modules'])\n        );\n        if (!parts[0].match(/([A-Za-z]:)/)) {\n            dir = '/' + dir;\n        }\n        dirs.push(dir);\n    }\n    return dirs;\n}\n\nfunction find_shims_in_package(pkgJson, cur_path, shims, browser) {\n    try {\n        var info = JSON.parse(pkgJson);\n    }\n    catch (err) {\n        err.message = pkgJson + ' : ' + err.message\n        throw err;\n    }\n\n    var replacements = getReplacements(info, browser);\n\n    // no replacements, skip shims\n    if (!replacements) {\n        return;\n    }\n\n    // if browser mapping is a string\n    // then it just replaces the main entry point\n    if (typeof replacements === 'string') {\n        var key = path.resolve(cur_path, info.main || 'index.js');\n        shims[key] = path.resolve(cur_path, replacements);\n        return;\n    }\n\n    // http://nodejs.org/api/modules.html#modules_loading_from_node_modules_folders\n    Object.keys(replacements).forEach(function(key) {\n        var val;\n        if (replacements[key] === false) {\n            val = __dirname + '/empty.js';\n        }\n        else {\n            val = replacements[key];\n            // if target is a relative path, then resolve\n            // otherwise we assume target is a module\n            if (val[0] === '.') {\n                val = path.resolve(cur_path, val);\n            }\n        }\n\n        if (key[0] === '/' || key[0] === '.') {\n            // if begins with / ../ or ./ then we must resolve to a full path\n            key = path.resolve(cur_path, key);\n        }\n        shims[key] = val;\n    });\n\n    [ '.js', '.json' ].forEach(function (ext) {\n        Object.keys(shims).forEach(function (key) {\n            if (!shims[key + ext]) {\n                shims[key + ext] = shims[key];\n            }\n        });\n    });\n}\n\n// paths is mutated\n// load shims from first package.json file found\nfunction load_shims(paths, browser, cb) {\n    // identify if our file should be replaced per the browser field\n    // original filename|id -> replacement\n    var shims = Object.create(null);\n\n    (function next() {\n        var cur_path = paths.shift();\n        if (!cur_path) {\n            return cb(null, shims);\n        }\n\n        var pkg_path = path.join(cur_path, 'package.json');\n\n        fs.readFile(pkg_path, 'utf8', function(err, data) {\n            if (err) {\n                // ignore paths we can't open\n                // avoids an exists check\n                if (err.code === 'ENOENT') {\n                    return next();\n                }\n\n                return cb(err);\n            }\n            try {\n                find_shims_in_package(data, cur_path, shims, browser);\n                return cb(null, shims);\n            }\n            catch (err) {\n                return cb(err);\n            }\n        });\n    })();\n};\n\n// paths is mutated\n// synchronously load shims from first package.json file found\nfunction load_shims_sync(paths, browser) {\n    // identify if our file should be replaced per the browser field\n    // original filename|id -> replacement\n    var shims = Object.create(null);\n    var cur_path;\n\n    while (cur_path = paths.shift()) {\n        var pkg_path = path.join(cur_path, 'package.json');\n\n        try {\n            var data = fs.readFileSync(pkg_path, 'utf8');\n            find_shims_in_package(data, cur_path, shims, browser);\n            return shims;\n        }\n        catch (err) {\n            // ignore paths we can't open\n            // avoids an exists check\n            if (err.code === 'ENOENT') {\n                continue;\n            }\n\n            throw err;\n        }\n    }\n    return shims;\n}\n\nfunction build_resolve_opts(opts, base) {\n    var packageFilter = opts.packageFilter;\n    var browser = normalizeBrowserFieldName(opts.browser)\n\n    opts.basedir = base;\n    opts.packageFilter = function (info, pkgdir) {\n        if (packageFilter) info = packageFilter(info, pkgdir);\n\n        var replacements = getReplacements(info, browser);\n\n        // no browser field, keep info unchanged\n        if (!replacements) {\n            return info;\n        }\n\n        info[browser] = replacements;\n\n        // replace main\n        if (typeof replacements === 'string') {\n            info.main = replacements;\n            return info;\n        }\n\n        var replace_main = replacements[info.main || './index.js'] ||\n            replacements['./' + info.main || './index.js'];\n\n        info.main = replace_main || info.main;\n        return info;\n    };\n\n    var pathFilter = opts.pathFilter;\n    opts.pathFilter = function(info, resvPath, relativePath) {\n        if (relativePath[0] != '.') {\n            relativePath = './' + relativePath;\n        }\n        var mappedPath;\n        if (pathFilter) {\n            mappedPath = pathFilter.apply(this, arguments);\n        }\n        if (mappedPath) {\n            return mappedPath;\n        }\n\n        var replacements = info[browser];\n        if (!replacements) {\n            return;\n        }\n\n        mappedPath = replacements[relativePath];\n        if (!mappedPath && path.extname(relativePath) === '') {\n            mappedPath = replacements[relativePath + '.js'];\n            if (!mappedPath) {\n                mappedPath = replacements[relativePath + '.json'];\n            }\n        }\n        return mappedPath;\n    };\n\n    return opts;\n}\n\nfunction resolve(id, opts, cb) {\n\n    // opts.filename\n    // opts.paths\n    // opts.modules\n    // opts.packageFilter\n\n    opts = opts || {};\n    opts.filename = opts.filename || '';\n\n    var base = path.dirname(opts.filename);\n\n    if (opts.basedir) {\n        base = opts.basedir;\n    }\n\n    var paths = nodeModulesPaths(base);\n\n    if (opts.paths) {\n        paths.push.apply(paths, opts.paths);\n    }\n\n    paths = paths.map(function(p) {\n        return path.dirname(p);\n    });\n\n    // we must always load shims because the browser field could shim out a module\n    load_shims(paths, opts.browser, function(err, shims) {\n        if (err) {\n            return cb(err);\n        }\n\n        var resid = path.resolve(opts.basedir || path.dirname(opts.filename), id);\n        if (shims[id] || shims[resid]) {\n            var xid = shims[id] ? id : resid;\n            // if the shim was is an absolute path, it was fully resolved\n            if (shims[xid][0] === '/') {\n                return resv(shims[xid], build_resolve_opts(opts, base), function(err, full, pkg) {\n                    cb(null, full, pkg);\n                });\n            }\n\n            // module -> alt-module shims\n            id = shims[xid];\n        }\n\n        var modules = opts.modules || Object.create(null);\n        var shim_path = modules[id];\n        if (shim_path) {\n            return cb(null, shim_path);\n        }\n\n        // our browser field resolver\n        // if browser field is an object tho?\n        var full = resv(id, build_resolve_opts(opts, base), function(err, full, pkg) {\n            if (err) {\n                return cb(err);\n            }\n\n            var resolved = (shims) ? shims[full] || full : full;\n            cb(null, resolved, pkg);\n        });\n    });\n};\n\nresolve.sync = function (id, opts) {\n\n    // opts.filename\n    // opts.paths\n    // opts.modules\n    // opts.packageFilter\n\n    opts = opts || {};\n    opts.filename = opts.filename || '';\n\n    var base = path.dirname(opts.filename);\n\n    if (opts.basedir) {\n        base = opts.basedir;\n    }\n\n    var paths = nodeModulesPaths(base);\n\n    if (opts.paths) {\n        paths.push.apply(paths, opts.paths);\n    }\n\n    paths = paths.map(function(p) {\n        return path.dirname(p);\n    });\n\n    // we must always load shims because the browser field could shim out a module\n    var shims = load_shims_sync(paths, opts.browser);\n\n    if (shims[id]) {\n        // if the shim was is an absolute path, it was fully resolved\n        if (shims[id][0] === '/') {\n            return shims[id];\n        }\n\n        // module -> alt-module shims\n        id = shims[id];\n    }\n\n    var modules = opts.modules || Object.create(null);\n    var shim_path = modules[id];\n    if (shim_path) {\n        return shim_path;\n    }\n\n    // our browser field resolver\n    // if browser field is an object tho?\n    var full = resv.sync(id, build_resolve_opts(opts, base));\n\n    return (shims) ? shims[full] || full : full;\n};\n\nfunction normalizeBrowserFieldName(browser) {\n    return browser || 'browser';\n}\n\nfunction getReplacements(info, browser) {\n    browser = normalizeBrowserFieldName(browser);\n    var replacements = info[browser] || info.browser;\n\n    // support legacy browserify field for easier migration from legacy\n    // many packages used this field historically\n    if (typeof info.browserify === 'string' && !replacements) {\n        replacements = info.browserify;\n    }\n\n    return replacements;\n}\n\nmodule.exports = resolve;\n","/home/travis/build/npmtest/node-npmtest-browser-resolve/node_modules/browser-resolve/empty.js":""}